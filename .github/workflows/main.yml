# This is a basic workflow to help you get started with Actions

name: rootfs

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
            matrix:
                desktop: [ubuntu-desktop, lomiri]
                kernel: [6.4, 6.6, 6.7]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3


      - name: PATH variable
        run: export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:\$PATH
        
      - name: Install Dependencies
        run: sudo apt update && sudo apt install build-essential gcc-aarch64-linux-gnu bc flex bison 7zip kmod bash cpio binutils tar git wget dpkg libssl-dev

      - name: Cloning and patching then building a kernel
        working-directory: ./linux
        run: git clone https://github.com/map220v/sm8150-mainline.git --branch nabu-${{ matrix.kernel }} --depth 1 linux && \
             cd linux && \
             echo 'CONFIG_CMDLINE="quiet splash"' >> ./arch/arm64/configs/sm8150.config
             make -j$(nproc) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- defconfig sm8150.config && \
             make -j$(nproc) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- && \
             mkdir ../linux-xiaomi-nabu/boot && \
             cp arch/arm64/boot/Image.gz ../linux-xiaomi-nabu/boot/vmlinuz-6.7.0-sm8150 && \
             cp arch/arm64/boot/dts/qcom/sm8150-xiaomi-nabu.dtb ../linux-xiaomi-nabu/boot/dtb-6.7.0-sm8150 && \
             rm -rf ../linux-xiaomi-nabu/lib && \
             make -j$(nproc) ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- INSTALL_MOD_PATH=../linux-xiaomi-nabu modules_install && \
             rm ../linux-xiaomi-nabu/lib/modules/**/build
      - name: Build deb's for updating
        run: dpkg-deb --build --root-owner-group linux-xiaomi-nabu && \
             dpkg-deb --build --root-owner-group firmware-xiaomi-nabu && \
             dpkg-deb --build --root-owner-group alsa-xiaomi-nabu

      - name: Initialize rootfs
        run: truncate -s 6G rootfs.img && \
             mkfs.ext4 rootfs.img && \
             mkdir rootdir && \
             mount -o loop rootfs.img rootdir && \
             wget https://cdimage.ubuntu.com/ubuntu-base/releases/$VERSION/release/ubuntu-base-$VERSION-base-arm64.tar.gz && \
             tar xzvf ubuntu-base-$VERSION-base-arm64.tar.gz -C rootdir && \
             mount --bind /dev rootdir/dev && \
             mount --bind /dev/pts rootdir/dev/pts && \
             mount --bind /proc rootdir/proc && \
             mount --bind /sys rootdir/sys && \ 
             echo "nameserver 1.1.1.1" | tee rootdir/etc/resolv.conf && \
             echo "xiaomi-nabu" | tee rootdir/etc/hostname && \
             echo "127.0.0.1 localhost && \
             127.0.1.1 xiaomi-nabu" | tee rootdir/etc/hosts

      - name: Installing qemu-static 
        run: wget https://github.com/multiarch/qemu-user-static/releases/download/v7.2.0-1/qemu-aarch64-static && \
             install -m755 qemu-aarch64-static rootdir/ && \
             echo ':aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7:\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff:/qemu-aarch64-static:' | tee /proc/sys/fs/binfmt_misc/register  && \
             echo ':aarch64ld:M::\x7fELF\x02\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\xb7:\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff:/qemu-aarch64-static:' | tee /proc/sys/fs/binfmt_misc/register


      - name: Installing desktop environment and updating 
        run: export DEBIAN_FRONTEND=noninteractive && \
             chroot rootdir apt update && apt upgrade -y &&apt install -y bash-completion sudo ssh nano u-boot-tools- ${{ matrix.desktop }} && apt install -y rmtfs protection-domain-mapper tqftpserv && \
             sed -i '/ConditionKernelVersion/d' rootdir/lib/systemd/system/pd-mapper.service && \
             cp *-xiaomi-nabu.deb rootdir/tmp/ && \
             chroot rootdir dpkg -i /tmp/linux-xiaomi-nabu.deb && \
             chroot rootdir dpkg -i /tmp/firmware-xiaomi-nabu.deb && \
             chroot rootdir dpkg -i /tmp/alsa-xiaomi-nabu.deb && \
             rm rootdir/tmp/*-xiaomi-nabu.deb && \
             chroot rootdir apt install -y grub-efi-arm64 && \
             sed --in-place 's/^#GRUB_DISABLE_OS_PROBER=false/GRUB_DISABLE_OS_PROBER=false/' rootdir/etc/default/grub && \
             sed --in-place 's/GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"/GRUB_CMDLINE_LINUX_DEFAULT=""/' rootdir/etc/default/grub && \
             echo "PARTLABEL=linux / ext4 errors=remount-ro,x-systemd.growfs 0 1  && \
             PARTLABEL=esp /boot/efi vfat umask=0077 0 1" | tee rootdir/etc/fstab && \
             mkdir rootdir/var/lib/gdm && \
             touch rootdir/var/lib/gdm/run-initial-setup && \
             chroot rootdir apt clean

      - name: Removing qemu-static 
        run: echo -1 | tee /proc/sys/fs/binfmt_misc/aarch64 && \
             echo -1 | tee /proc/sys/fs/binfmt_misc/aarch64ld && \
             rm rootdir/qemu-aarch64-static && \
             rm qemu-aarch64-static

      - name: Cleaning up 
        run: umount rootdir/sys && \
             umount rootdir/proc && \
             umount rootdir/dev/pts && \
             umount rootdir/dev && \
             umount rootdir && \
             rm -d rootdir && \
             rm -rf linux
      - name: rootfs to 7z 
        run: 7zz a rootfs.7z rootfs.img

      - name: Upload rootfs.7z
        uses: actions/upload-artifact@v4.0.0
        with:
          # Artifact name
          name: rootfs_${{ matrix.desktop }}_${{ matrix.kernel }}
          path: rootfs.7z
          compression-level: 0

      - name: Upload deb packages
        uses: actions/upload-artifact@v4.0.0
        with:
          # Artifact name
          name: xiaomi-nabu-debs_${{ matrix.desktop }}_${{ matrix.kernel }}
          path: ${{ github.workspace }}/*.deb
